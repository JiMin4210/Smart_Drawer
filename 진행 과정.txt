0. buf = bytes(arr) # 이걸 바꿔줘야 작동한다.
  -> assistant-sdk-python/google-assistant-sdk/googlesamples/assistant/grpc/audio_helpers.py 경로에서 바꿔야함.
  -> toString으로 되는게 아님
  -> b'xxxxxxxxxxxxxx'로 가야함
  -> toString은 str()이 될 수 있는데 str은 UTF-8형태이고 bytes는 ASCII형태라 음성 전달은 바이트로 해야한다.
  -> 즉 음성데이터 [1,2,3]을 증폭하려고 int로 만들었기때문에 bytes([1,2,3])으로 문자열로 바꿔야한다는것이다.

  -> self.conversation_stream.write(resp.audio_out.audio_data)
  -> 응답받는쪽에서 에러났던것이다. 이어폰에 출력해주려고 증폭해주려는데 음성 데이터가 bytes가 아니라서 자꾸 에러난것

1. 도커 mqtt로 하는게 낫겠다.
-> connect가 끊기면 힘들고 esp의 ip주소를 따기 귀찮기 떄문
-> 즉 jmk.local로? 접속해도 되기때문에 괜찮을듯

2.exit(), sys.exit() 차이
-> exit()는 대화식 쉘에서 사용
-> sys.exit()는 프로그램에서 사용을 추천한다.
      - SystemExit예외를 발생

3. sudo apt-get install jackd
-> 이거 설치하니까 jack못찾았다는에러 사라짐
-> jack은 마이크를 뜻하는듯 이어폰은 빼도 아무런 에러가 안난다. + 이어폰은 중복디바이스 에러 안남!!! ★★★
-> 이어폰은 중복 디바이스에러는 왜 안나는지는 모르겠다. (0,0이라 기본으로 생각해서 그냥 있다생각하는것인가)
-> assistant, snowboy와중에도 aplay해도 아무런 에러 없음.
-> 무조건 동시에해도 되고 그 이유는? (아마 그냥 진짜 내보내기만 해서그런가)
-> record의 경우 스트림을 열고 그 스트림에 쓰기를 하는경우라 중복되면 안되는건가? (그건 모르겠다)

-> 이게 된다는건 구글 어시스턴트 내부에 TTS가 오류없이 된다는 것이다 (이어폰 동시사용이 가능하기 때문에)
-> 이 이유는 마이크는 stream read로 읽기는 한명밖에 안되는데
-> 이어폰은 stream write로 쓰기는 여러명이 가능하기떄문에 그런것인가? (이건 아닌듯 그냥 mic 스트림파일은 한명만 읽기 가능한듯)

4. snow-boy
-> PyAudio==0.2.9
-> 이거아니면 안됨 (이거 문제는 아니였나 단순 민감도의 문제였을수도- 왜냐면 저거 버전 아니여도 잘됨 (더 높아도))

5. snowboy를 제외한 키워드는 CPU부하를 일으킬가능성 존재.
  -> jarvis는 클래스 생성자에서 apply_frontend=True 해줘야한다.

6. https://github.com/seasalt-ai/snowboy
  -> 개인 녹음 가능한 스노우보이 버전

7. snowboy 인식문제
  -> 민감도를 올리니까 잘된다 (0.9정도) -> 이 민감도가 주위가 얼마나 시끄러운지인듯?
       (왜냐면 소리는 그대로인데 잡음이 없어져야 잘되는것이기 때문) or (민감도가 높을수록 대충듣는다? 이건 아닌듯)
       (이것도 아닌듯 민감도 높을땐 저비, 자비도 다 되는데 0.7만해도 자비스를 정확히해야 인식해버림)
       (즉 민감도가 낮을수록 단어를 정확히 말해야하는게 맞는듯)
  -> audio_gain = 5로하니까 멀리서도 잘됨
  -> 자비스의 민감도 = [0.9,0.90]으로 해야한다.

8. 오디오 스트림 문제
-> 구글 어시스턴트랑 스노우보이를 동시에 사용 불가 (오디오 스트림 공유는 안되기 떄문)
-> sub 프로세스로 해결가능하지만 딜레이시간이 너무 길다. (구글 인증때문에)
-> 호출어 인식 후에 딜레이시간을 주기보다는 구글인증 -> 호출어 -> 음성인식 -> 종료를 반복하는게 더 효율적으로 보였다.
-> 따라서 구글 어시스턴트 오디오스트림 열기 전에 호출어 스트림 열고 완료 후 구글 어시스턴트 오디오 스트림을 열어줬다.

9. logger 출력문제
-> log 스트림을 스노우보이에서 먼저 가져갔기 때문에 구글어시스턴트로그는 출력되지 않음을 확인했다.
-> 스트림은 파일 내에 로그를 기록하는용도라함
-> 즉 출력화면에 snow 로그스트림만이 출력이 되게했는데 logging을 써주니 출력이 안됐던것인듯(이게 맞다 실험 다 해봄)

10. 껏다 켜도 마이크 증폭값 유지하는 방법
 -> https://medialink.tistory.com/m/31
 -> amixer -c 0의 경우 스피커이고 (번호는 카드 번호이다. 마이크의경우 1,0이기 때문)
 -> amixer -c 1의 경우 마이크인것을 기억
 -> amixer -c 1 cset numid=3 14
     (마이크 캡쳐를 14단계로한다)
 -> amixer -c 1 contents을 통해 numid에 뭐가있는지 확인 (캡쳐, auto gain등등 존재할것)
 -> 시간 많으면 amixer -h로 sset이런거 뭔지 알아보기
 

 -> 카드 번호 대신 이름을 사용해도 된다고 한다 ★★★★★★★★★
 -> arecord 했을 때 바로 앞에 나오는 값이 바로 디바이스 이름이라고한다.

이때 오디오 장치를 검색해보면 카드 번호가 0에서 1로 변경된 것을 볼 수 있었다.
부팅 시 디바이스 로딩이 지연되거나 해서 번호가 변경되는 것으로 보인다.
번호는 아무래도 좀 불안한 감이 있어서 다른 방법이 없을까 하고 찾아보니 아래의 링크를 찾게 되었다. 
여기에 보면 카드 번호 외에 이름으로도 지정이 가능하다는 것을 알 수 있었다.
-> https://www.alsa-project.org/wiki/Asoundrc

11. snowboydecoder.py
  -> 201번째줄부터 인식 대기 (while문)
  -> 녹음모드시 호출어 이후 자기 소리 녹음 가능 (active모드 전환된다)

----------------------------추가 정보--------------------------
amixer cset numid=3 2 for HDMI0
amixer cset numid=3 3 for HDMI1
amixer cset numid=3 1 for 3.5mm headphone jack
오디오 출력장치 선택 방법이다. (0일경우 auto이다)
-> 나중에 라파4쓰면 hdmi 오디오쓸지 선택할때 사용가능할듯
----------------------------------------------------------------

11. OSError: [Errno -9997] Invalid sample rate
  -> 마이크 연결 에러 (asoundrc 다시 확인하기)

12. rc.local은 부팅시 자동실행 명령어 스크립트 수행하며 일반적으로 서버 부팅시마다
     매번 자동 실행되길 원하는 명령어는 /etc/rc.d/rc.local에 넣어준다.
  -> /etc/rc.local"파일은 시스템이 부팅하고 나서 맨 마지막에 실행되는 스크립트입니다.
  -> rc.local파일 활성화 필요하다 (usr어디 들어가서 활성화 시켜줘야 실행 가능)
  -> 이건 라파4부터이고 3는 자동설정 되어있는듯하다.

 -> sudo vi /etc/xdg/lxsession/LXDE-pi/autostart
     (여기서 바꿔줘도 된다)
     @/home/pi/venv/bin/python3.9 /home/pi/assistant/pushtotalk
     lxterminal -e ~/assistant/run.sh
 -> 이런형식으로 넣어주면 된다.


13. 백그라운드 실행 = 마지막에 Python background running
  #python3 FileName.py& <===(단점) 터미널 창이 닫히면 종료됨.
  #창이 닫혀도 백그라운드 실행하는 방법
  #nohup python3 FileName.py&
  #nohup 실행으로 생긴 로그 확인하기
  #tail –f nohup.out <==== 쌓이진 않음. 실시간으로 보여지며 소멸됨.
  #쌓이는 로그 파일으로 설정
  #nohup python3 –u FileName.py > test.txt(로그파일 명) &

  #백그라운드 프로세스 종료하는 법
  #ps –ef | grep FileName.py
  -> kill -9 3239(pid num)
  -> -9는 강제종료의 의미라고한다.

14. 파일 오픈 경로는 실행시킨 현재 경로를 기준으로한다 (실행시킨 파일 경로가 아닌)
  -> 즉 홈에서 ./assistant/run.sh를 하게되면 resource/models/jarvis를 찾을수가 없게된다.
  -> cd assistant후에 ./run.sh를 해줘야 잘 된다.
  -> 따라서 sudo vi /etc/profile 이나 /etc/rc.local 에서 cd명령어를 먼저 써줘야한다.

15. 부팅 자동실행 시 도커 mqtt가 먼저 켜지지않아 파일이 계속 꺼지지만
     백그라운드로 pushtotalk를 실행시켰기에 도커가 켜지면 자동으로 정삭작동이 된다.

  
16. tty1 pts/0 차이
  -> 원래 라즈베리파이 hdmi 터미널 하나 ssh터미널 하나에서 sh파일이 실행중이라는 뜻
  -> 동시에 run이 켜져서 음성인식이 안됐던 문제 해결 (if문으로 run을 하나만 켜줌으로써)
  -> tty1이 라즈베리파이고 pts/0부터가 원격접속자를 뜻한다.
  -> tty1의 bash는 항상 켜져있고 원격접속자가 접속하면 pts/0 -bash도 켜진다.

17. .profile은 터미널이 켜질때마다 한번씩 실행된다 (즉 라즈베리파이에도 하나 생성, ssh터미널에도 하나 생성돼서 오류 발생)

18. google stt가 더 쉬움... 그럼 구글 어시스턴트의 이유는? -> 응답을 하게 해야하나 고민
  -> 날씨, 시간 등등 유용한 정보를 받아오는게 나을수도 있겠다.

19. gTTS는 aplay로 재생이 안됨 (24000Hz)라고 하긴하는데 설정해도 안되는듯
  -> sudo apt-get install mpg321
      (mp3 player를 설치해야한다)
  -> mpg321 ans.mp3
  -> os.system("mpg321 ans.mp3") #파이썬 방법)

20. sh파일 [: missing `]'에러 해결
  -> if문 [ -f $pid ] 대괄호 사이에는 띄워쓰기 필수
  -> pid에는 아규먼트 하나만 들어가야한다 따라서 awk '{print $2}로 하나로 줄인다음 들어가는거
  -> 단순 문자열을 pid라고 하는줄알았지만 많은 아규먼트의 구성으로된 pid였다.

21. 음성은 백그라운드 재생해봤자 거기서 거기라 그냥 파이썬 내부에서 실행하게한다.

22. run, call 한번에 죽이기
  -> kill -9 `ps -ef|grep -P "call|run.sh"|grep -v 'grep'|awk '{print $2}'`

23. 구글어시스턴트 audio_helpers.py에 main문에서 오디오 스트림 과정을 볼 수 있다.
    stream = ConversationStream(source=audio_device,
                                sink=audio_device,
                                iter_size=audio_iter_size,
                                sample_width=audio_sample_width)
  -> 종료 시 stream.close()로 닫아버린다.
  -> stream.start_recording()
  -> while time.time() < end_time:
         samples.append(stream.read(audio_block_size))
  -> stream.stop_recording()
  -> 녹음 과정이다. (음성 데이터가 samples에 저장된다)
  -> stream.read가 마이크로부터 읽어들이는것이고 stream.write가 오디오 출력이다.

24. stream.close()를 하지 않았는데 while문 내부에서 snowboy의 마이크 스트림도 잘 연결된다 왜인지는 모르겠다.
  -> 그렇다고 pushtotalk 밑에부분에 넣으면 작동하지않는다 (오디오 설정 후 assist()함수 써주면 스트림이 종료된다고밖에 못보겠음)
  -> 스트림 설정 전에 snowboy하고 구글 어시스턴트 스트림 재설정?하기 떄문에 괜찮은건가
  -> 해결 : stream.close()는 source, sink.close()를 해주는 것인데 이거 말고도
              코드 중에 stop_recording, stop_playback에서 source, sink.close()가 있기에 마이크, 이어폰 스트림이 닫힌것이다.

25. audio_source = 마이크
     audio_sink = 이어폰이였다.

25. 현재 상황
  -> while문을 쓰면서 "사물함"이라는 키워드가 있어야 스마트사물함 관련이고 없다면 어시스턴트 관련으로 만들기

26. 구글 인증을 7일마다 해줘야한다
  -> google-oauthlib-tool --scope https://www.googleapis.com/auth/assistant-sdk-prototype --save --headless --client-secrets /home/pi/key/client_secret_844640208093-a3eepqprstui2fb3phrmanm58bhnsnjb.apps.googleusercontent.com.json
  -> url 들어가서 인증 후 값 복사해서 붙여넣기

27. sudo apt-get install lib32z1
  -> 64bit OS 우분투에서 32bit arm 컴파일러를 사용하기위해서는 (도구체인 사용을 위해) 이걸 설치 필요
  -> 64bit의 호스트를 설치한 경우 CD에 포함된 툴체인이나 기타 바이너리들은 32bit용으로 배포가
      되어 있으므로 사용하지 못한다. 따라서 64bit 환경에서 32bit 라이브러리 및 바이너리를 사용할
      수 있도록 호환해주는 라이브러리를 별도로 설치해주도록 한다.

28. flex와 bison 프로그램이 설치되어있지 않아 빌드가 실패했습니다.
  -> apt-get으로 설치해주기

  -> 커널소스 찾아야하는 이유가 그거같다 (커널 소스 빌드쪽에서 어떤 보드에 타겟할건지 물어보는게 너무많다)
  -> imx6q 커널소스면 이런거 안물어보고 바로 빌드 될듯
  -> /lib/modules/5.13.0-1029-aws/build
  -> /home/ubuntu/temp/work/achroimx6q/linux-2.6.16/kernel
  -> make에서 -C option은 뒤의 parameter로 directory를 변경하라는 의미
  -> KERNEL_PATH: 보드용 (이미 컴파일된) 커널이 포함된 디렉토리. 즉 imx6q커널을 컴파일 시켜야한다?
  -> kernel 소스 다운받은 후 make uImage로 컴파일 시켜야 가능하다. (make achroimx_defconfig의 경후 환경설정임)

  -> imx6q의 경우 https://github.com/embeddedTS/linux-3.0.35-imx6
  -> 리눅스 3.0.35버전을 사용한다고한다.
  -> Module.symvers가 있는 위치를 KDIR로 잡아야함
  -> ~/temp/work/achroimx6q/linux-3.0.35-imx6에 있음 (원래는 kernel에 있어야하는데 makefile이 애초에 전 파일에 있었음)

  -> sudo apt-get install linux-headers-generic
  -> (linux/init.h)이런 리눅스 헤더 없을 때 이거 필수 설치

---------------------------------------------------------------------------
  -> make파일 질문하기
  -> 커널 소스의 역할? (우분투 커널소스 넣어도 되는지?) -> 모듈은 커널 버전영향을 많이 받음으로 비슷한 환경 설치해주기위함.
  -> .c파일 헤더파일 없다면서 자꾸 에러남
  -> 생성된 ko파일을 왜 지우는지? -> make clean일 때만 지움
  -> 왜 ko파일 생성 안되는지..
  -> make 하면 바로 되는 이유?
  -> shell pwd와 pwd의 차이?
---------------------------------------------------------------------------

라즈베리파이 초기화
-> 의심 인터넷이 느려서 음성인식이 안됐었음 모르고 다 삭제
-> venv모듈사용 안돼서 다른 모듈 사용, but .local을 안지워서 고생했음 이거 지워야 가상환경 잘 만들어짐
-> pip uninstall grpcio  (pip 말고 python3 -m pip install)
    pip uninstall grpcio-statu
    pip install grpcio==1.44.0 --no-binary=grpcio 
    pip install grpcio-tools==1.44.0 --no-binary=grpcio-tools
    python3 -m pip install grpcio==1.44.0 --no-binary=grpcio 
    python3 -m pip install grpcio-tools==1.44.0 
    This then fixed the GLIBC_2.33 not found for me.



-> from tenacity.async import AsyncRetrying에러
    pip uninstall tenacity
    pip install tenacity==4.12.0

-> No module named 'pathlib2' 에러
  -> sudo pip install --upgrade -r requirements.txt


  -> python3 -m pip install google-assistant-library==0.1.0

-> pip install --upgrade google-assistant-grpc (grpc를 계속 못가져오고있었음)
(0.2.0) -> (0.3.0)로 업데이트 해야됨

1. GPIO 모듈
python3 -m pip install RPi.GPIO

2. python cffi 라이브러리 warning 163번줄 pass로 전환
def _warn_for_non_extern_non_static_global_variable(decl):
    if not decl.storage:
        import warnings
        warnings.warn("Global variable '%s' in cdef(): for consistency "
                      "with C it should have a storage class specifier "
                      "(usually 'extern')" % (decl.name,))

pass로 전환해서 오류 없앤다. (실제로 된다)

3. sed 치환을 이용해서 부팅 시 마이크 카드 번호 체크
  -> 마이크 이름으로 넣으면서 sed 치환을 사용할 필요가 없어짐

4. 핫스팟은 mdns안되는줄알았지만 윈도우 10에서만 안되던것
  -> 즉 esp에서 라즈베리파이 jmk.local이 잘 인식된다
  -> windows10에서만 mdns가 작동하지 않는다
  -> 핫스팟도 mdns가 된다는것에 유의

5. 물건 등록시 자동 열리기 넣자.

6. 물건 등록 과정 (핵심 코드)
  -> result = []
  -> result.append(str(x[(num-1)%3]))
  -> result.append(str(y[(num-1)//3])) # 몇 번째 서랍을 좌표로 변환하는 과정 - join은 str일때만 합쳐주고 아닐땐 에러라서 str변환 필요

  -> result = name + ' ' + ','.join(result) + '\n' # join을 통해 list 문자열 변환

7. Call by reference
Call by reference는 call by value와는 다르게 함수의 인자로 넘어간 값이 함수 내부에서 변경되되면 실제로 값이 변경된다.
Call by reference라는 이름에서 알 수 있듯이 참조를 호출하는 방식이다.
C언어에서는 포인터를 통해 구현이 가능한데 포인터는 주소 값을 가지고 있어 
포인터를 함수의 인자로 넘기면 실제 메모리에 저장되어 있는 변수의 주소값을 넘기는 것과 같아 진다.
따라서 Call by reference로 인자를 넘기면 메모리 상에 저장된 실제 값에 변경을 줄 수 있기 때문에 
함수 외부에서도 값이 변경되는 것을 볼 수 있다.

-> 즉 파이썬에선 이 인자로 줘야지 주소값을 넘겨주면서 값이 면한다.
-> list,dict이 값을 주소로 보내는것이지만 전체를 한번에 바꾸는건 안되는듯?하다 실제로 things자체를 보냈지만 바뀌는건 없었다.

8. 스피커로 바꿧을 때 말이 중첩되면 백그라운드를 바꾸기

9. 블루투스 연결
sudo apt-get update
sudo apt-get upgrade 실행
sudo apt-get install bluetooth blueman bluez
sudo apt-get install python-bluetooth

sudo bluetoothctl
D4:F5:47:97:C8:CB (구글 홈 미니 mac주소)
pair D4:F5:47:97:C8:CB
connect D4:F5:47:97:C8:CB
trust D4:F5:47:97:C8:CB

-> mpg123 -a bluealsa:HCI=hci0,DEV=D4:F5:47:97:C8:CB ans.mp3 
    (hciconfig - 이걸로 확인결과 hci0장치가 맞다.) -> 이거까지 할 필요 없다 mpg123으로 충분하다.
-> 자꾸 패키지 의존성문제로 설치가 안됨
-> Failed to connect: org.bluez.Error.Failed
$ sudo apt-get install pulseaudio-module-bluetooth 
   (이게 누락된것) -> 이건 이미 설치 돼 있었음
$ sudo usermod -a -G bluetooth pi -> 이게 제일 중요한 것이였다.
$ sudo reboot
$ pulseaudio --start

-> https://guzene.tistory.com/184 (killall pulseaudio설명)
-> + 로컬(이어폰)출력 or 블루투스 출력 정하는 방법 (sink이용해서 인덱스 확인후 전환)★★★★
-> 우린 자동으로 전환해주는듯하다. -> 이게 맞다 우리의 경우 자동전환이라 매우 편해짐★★★★
-> + 구글 홈 미니는 와이파이 없어도 블루투스 잘 연결 된다★★★★
★★★★★★★★★★★★★★
블루투스 스피커 자동연결
pulseaudio --start
-> 이건 항상 써줘야한다고 한다. (나의 경우 안써줘도 실행은 잘 됨)

hcitool con 
-> 현재 연결된 디바이스 확인
-> hcitool con | grep D4:F5으로 식별하자

echo -e "connect D4:F5:47:97:C8:CB \nquit" | bluetoothctl
-> 파이프라인 이용
-> e의 의미는 백슬래시, 이스케이프 해석 가능이라는 뜻이다

#!/bin/bash
while [ 1 ]
   do
        pid=`ps -ef | grep "calltotalk.py" | grep -v 'grep' | awk '{print $2}'`
        if [ -z $pid ]; then
        amixer -c Device cset numid=3 14
        ~/venv/bin/python calltotalk.py &
        fi
        bt=`hcitool con | grep D4:F5 | awk '{print $2}'`
        if [ -z $bt ]; then
        echo -e "connect D4:F5:47:97:C8:CB \nquit" | bluetoothctl
        fi
   done
★★★★★★★★★★★★★★

---------------------------------------------------------------------------------------------------------
해결 - 그냥 잘 됨 aplay로하던 mpg123으로하던 블루투스 연결되면 기본 스피커로 변경 되는듯
---------------------------------------------------------------------------------------------------------
-> 이걸 해야하지만 또 패키지 의존성 문제
-> sudo apt-get -f install
    (의존성 에러 바로 다음에 써주면 해결된다하는데 안되긴한다)
-> sudo apt dist-upgrade (강제 업그레이드? 인듯) 
    apt패키지를 업그레이드할 때 다른 패키지를 제거해야 하는 경우 일반적으로 이 작업을 수행

-> 범인은 예전 도메인인것 같다. /etc/apt/sources.list에서 바꿔줘야할듯 (예전에 바꿔둔거 대참사..)
-> 예전 도메인이라 패키지들이 최신화가 안돼있다.. (이것도 아닌게 바꿔도 안됐음- 새롭게 다시 설치할 예정)
    -> 도커까지 없어져버림 auto remove때매 그런듯?

-> 도커나 pulseaudio 모두 내가 해당한 그룹 pi에서 실행되어야 잘 된다. (각자 다른 그룹에서 실행되면 안된다)
---------------------------------------------------------------------------------------------------------

10. 라즈베리파이4 전력
  -> 젠더에 꼽으면 작동하지않음 (젠더가 최대2.5A라서 그런가)
  -> 혼자 꼽아야함 (노트북에)
  -> 꺼진 컴퓨터에도 연결 안됨
  -> 보조배터리로는 잘 된다.

11. docker mqtt서버 종료 문제
  -> Docker 시스템 서비스를 자동으로 실행하도록 Raspberry Pi를 구성할 수 있습니다.
  -> 이를 사용하면 재시작 정책이 항상 또는 중지되지 않는 것으로 설정된 컨테이너는 재부팅 후 자동으로 다시 시작됩니다.
  -> sudo systemctl enable docker

12. 사실 위에건 중요한게 아니였고 중요한건 docker compose.yml이였다
  -> yml파일에 restart = always가 아마 부팅시 계속 실행일 것이다 (원래는 부팅시 stop모드로 전환)

13. 일정 시간 후에 mqtt 끊기는 현상 -> loop_start()로 계속 reconnect 해줘야하는듯 (일정시간 응답 없으면 끊기나?)
loop_start()
- 새로운 thread() 를 생성해서 loop() 를 정기적으로 호출하며
- 자동으로 reconnect 도 해준다
- 멈출때는 loop_stop()

비슷한 문제가 발생했습니다. 제 경우에는 키워드가 메인 스레드를 한동안 차단하는 사용자 정의 함수를 호출하기 때문에 
연결 해제가 발생합니다. 이렇게 하면 MQTT 루프가 브로커와 정기적으로 상호 작용하여 아직 살아 있음을 알릴 수 없습니다.
-> 즉 일정시간 응답이 없을 시 연결 해제가 맞는듯하다.

14. esp8266보드 업로드 문제 해결
  -> 16,15번 핀은 사용하지말자 (핀을 끼고있었더니 오류 발생)